AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Project:
    Type: String
    Default: coffeepot
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
  ArticleDynamoDbTable:
    Type: String
    Default: coffeepot-dev-news
  TopicDynamoDbTable:
    Type: String
    Default: coffeepot-dev-topics
  S3BucketName:
    Type: String
    Default: coffeepot-dev-bucket-073588985313

Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Name: !Sub ${Project}-${Environment}-api
  
  ApiGatewayArticlesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: articles
      RestApiId: !Ref ApiGatewayRestApi
  
  ApiGatewayArticlesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
      OperationName: lambda
      ResourceId: !Ref ApiGatewayArticlesResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayArticlesGetMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Environment
      Tags:
        - Key: project
          Value: !Ref Project
        - Key: environment
          Value: !Ref Environment

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref ApiGatewayStage
      UsagePlanName: !Sub ${Project}-${Environment}-usage-plan
  
  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${Project}-${Environment}-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayRestApi
          StageName: !Ref ApiGatewayStage

  ApiHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      RoleName: !Sub ${Project}-${Environment}-api-handler-lambda-role
      Tags:
        - Key: project
          Value: !Ref Project
        - Key: environment
          Value: !Ref Environment

  ApiHandlerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Project}-${Environment}-api-handler-lambda-policy
      Roles: 
        - !Ref ApiHandlerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
            Resource: 
              - !Sub "arn:aws:dynamodb:us-east-1:073588985313:table/${ArticleDynamoDbTable}"
              - !Sub "arn:aws:dynamodb:us-east-1:073588985313:table/${TopicDynamoDbTable}"

  ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/src/api_handler.zip
      Environment:
        Variables:
          ARTICLE_DYNAMODB_TABLE: !Ref ArticleDynamoDbTable
      FunctionName: !Sub ${Project}-${Environment}-api-handler
      Handler: api_handler.lambda_handler
      Role: !GetAtt ApiHandlerLambdaRole.Arn
      Runtime: python3.7
      Tags:
        - Key: project
          Value: !Ref Project
        - Key: environment
          Value: !Ref Environment
      Timeout: 120
  
  ApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ApiLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/articles"